The box model, however, has an awkward limitation regarding box dimensions. This limitation is best
illustrated with an example.

<h1>Hello World</h1>
h1 {
  border: 1px solid black;
  height: 200px;
  width: 300px;
  padding: 10px;
}
In the example above, a heading element's box has solid, black, 1 pixel thick borders.
The height of the box is 200 pixels, while the width of the box is 300 pixels. A padding
of 10 pixels has also been set on all four sides of the box's content.

Unfortunately, under the current box model, the border thickness and the padding will affect
the dimensions of the box.

The 10 pixels of padding increases the height of the box to 220 pixels the width to 320 pixels.
Next, the 1 pixel thick border increases the height to 221 pixels and the width to 321 pixels.

Under this box model, the border thickness and padding are added to the overall dimensions of
the box. This makes it difficult to accurately size a box. Over time, this can also make all of a
web page's content difficult to position and manage.

how to use a different technique that avoids this problem?

Fortunately, we can reset the entire box model and specify a new one: border-box.

* {
  box-sizing: border-box; /* the default value is "content-box", the traditional box model". */
}